# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/171DS04OB0kV1eQyShNtrSQVTfN38GIMk
"""

# Streamlit and image processing libraries
import streamlit as st
from PIL import Image, ImageEnhance
import numpy as np
import cv2
import easyocr

# Define OCR class
class ImageOpticalCharacterRecognition:
    def __init__(self):
        self.reader = easyocr.Reader(['en'])

    def run_recognition(self, image):
        extracted_text = self.reader.readtext(np.array(image))
        text_list = [i[1] for i in extracted_text]
        text = "  \n".join(text_list)
        return text

# Image resizing functions
def process_image(image, points):
    resized_img = cv2.resize(np.array(image), points, interpolation=cv2.INTER_LINEAR)
    return Image.fromarray(resized_img)

def process_scaled_image(image, scaling_factor):
    resized_img = cv2.resize(np.array(image), None, fx=scaling_factor, fy=scaling_factor, interpolation=cv2.INTER_LINEAR)
    return Image.fromarray(resized_img)

# Streamlit App
st.title('Image Processing Application')

# File uploader
uploaded_file = st.file_uploader("Upload an image", type=["jpg", "jpeg", "png"])
if uploaded_file:
    image = Image.open(uploaded_file)
else:
    st.stop()

# Display original image
st.image(image, caption="Original Image", use_column_width=True)

# Image Enhancement Feature
st.subheader("Enhance Image")
enhancement_type = st.selectbox("Select enhancement type", ["Original", "Contrast", "Brightness", "Sharpness"])
enhancement_factor = st.slider("Enhancement factor", 0.5, 3.0, 1.0)

if enhancement_type == "Contrast":
    enhancer = ImageEnhance.Contrast(image)
elif enhancement_type == "Brightness":
    enhancer = ImageEnhance.Brightness(image)
elif enhancement_type == "Sharpness":
    enhancer = ImageEnhance.Sharpness(image)
else:
    enhancer = None

if enhancer:
    enhanced_image = enhancer.enhance(enhancement_factor)
    st.image(enhanced_image, caption=f"Enhanced Image ({enhancement_type})", use_column_width=True)
else:
    enhanced_image = image

# Resizing Options
st.subheader("Resize Image")
resize_option = st.radio("Choose resizing option", ("Custom Width and Height", "Scaling Factor"))

if resize_option == "Custom Width and Height":
    width = st.number_input("Enter width", min_value=10, max_value=2000, value=720)
    height = st.number_input("Enter height", min_value=10, max_value=2000, value=720)
    resized_image = process_image(enhanced_image, (int(width), int(height)))
elif resize_option == "Scaling Factor":
    scaling_factor = st.slider("Scaling factor", 0.1, 5.0, 1.0)
    resized_image = process_scaled_image(enhanced_image, scaling_factor)

st.image(resized_image, caption="Resized Image", use_column_width=True)

# OCR Feature
st.subheader("OCR - Extract Text")
if st.button("Run OCR"):
    ocr = ImageOpticalCharacterRecognition()
    extracted_text = ocr.run_recognition(resized_image)
    st.text_area("Extracted Text", extracted_text, height=200)